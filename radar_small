// Include application, user and local libraries
#include <Servo.h>.

#include "SPI.h"
#include "TFT_22_ILI9225.h"

#define TFT_RST A4
#define TFT_RS A3
#define TFT_CS A5 // SS
#define TFT_SDI A2 // MOSI
#define TFT_CLK A1 // SCK
#define TFT_LED 0 // 0 if wired to +5V directly

TFT_22_ILI9225 tft = TFT_22_ILI9225(TFT_RST, TFT_RS, TFT_CS, TFT_SDI, TFT_CLK, TFT_LED);

Servo myServo;
const int trigPin = 5;
const int echoPin = 6;
int val = 200;
int x;
long duration;
int distance;
int k;
int f;
int i;

//Setup part
void setup() {
#if defined(ESP32)
  hspi.begin();
  tft.begin(hspi);
#else
  tft.begin();
#endif
  Serial.begin(9600);
  radar();
  myServo.attach(9);
}


void loop() {

tft.setOrientation(1);
 
  
  for (i=0; i<180; i=i+6)  // a bigger radius might need more steps
  {
    
    Serial.println(i);
    tft.setFont(Terminal12x16);
    if(i>100){
    tft.drawText(70,tft.maxY()-20,String(i),COLOR_CYAN);
    }
    if(i<100){
      tft.drawText(70,tft.maxY()-20,String(i),COLOR_CYAN);
      tft.drawText(95,tft.maxY()-20,"  ",COLOR_BLACK);
    }
    myServo.write(i);
    tft.drawText(120,tft.maxY()-20,"deg",COLOR_CYAN);
    tft.drawText(150,tft.maxY()-40,"cm",COLOR_CYAN);

    double radians = i * PI / 180;
    double px = tft.maxX()/2 + 110 * cos(radians);
    double py = 0 + 110 * sin(radians);
    
    tft.drawLine(tft.maxX()/2,0,px, py, COLOR_WHITE);

  
  }
 
  for(i=180; i>0; i = i-6){
    Serial.println(i);
    tft.setFont(Terminal12x16);
    if(i>100){
    tft.drawText(70,tft.maxY()-20,String(i),COLOR_CYAN);
    }
    if(i<100){
      tft.drawText(70,tft.maxY()-20,String(i),COLOR_CYAN);
      tft.drawText(95,tft.maxY()-20,"  ",COLOR_BLACK);
    }
    myServo.write(i);
    tft.drawText(120,tft.maxY()-20,"deg",COLOR_CYAN);
    tft.drawText(150,tft.maxY()-40,"cm",COLOR_CYAN);

    double radians = i * PI / 180;
    double px = tft.maxX()/2 + 110 * cos(radians);
    double py = 0 + 110 * sin(radians);
    tft.drawLine(tft.maxX()/2,0,px, py, COLOR_GREEN);
    
  }
}
void radar(){
  tft.setBacklight(LOW);
  tft.setOrientation(1);
  tft.drawRectangle(0, 0, tft.maxX() - 1, tft.maxY() - 1, COLOR_WHITE);
  tft.setFont(Terminal6x8);  
  tft.drawCircle(110, 0, 50, COLOR_CYAN);
  tft.drawCircle(110, 0, 100, COLOR_CYAN);
  
  tft.setOrientation(3);
  tft.drawText(105,130,"30",COLOR_CYAN);
  tft.drawText(105,90,"60",COLOR_CYAN);
  
  tft.setOrientation(1);
  tft.setFont(Terminal12x16);
  tft.drawText(0,tft.maxY()-60,"RADAR",COLOR_CYAN);
  tft.drawText(0,tft.maxY()-40,"Distance:",COLOR_CYAN);
  tft.drawText(0,tft.maxY()-20,"Angle:",COLOR_CYAN);
  
}


int calculateDistance(){ 
  
  digitalWrite(trigPin, LOW); 
  delayMicroseconds(2);
  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trigPin, HIGH); 
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin, HIGH); // Reads the echoPin, returns the sound wave travel time in microseconds
  distance= duration*0.034/2;
  Serial.println(distance);
  return distance;
}